<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ibenben.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.ibenben.domain.Role">
    <id column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="role_code" jdbcType="VARCHAR" property="roleCode" />
    <result column="group_type" jdbcType="VARCHAR" property="groupType" />
  </resultMap>
  <sql id="Base_Column_List">
    role_id, role_name, role_code, group_type
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  
  <select id="getRolePermissionsByUser" resultType="java.lang.Integer">
    select
    p.permission_id
    from user_role ur
    inner join role r on r.role_id = ur.role_id and r.group_type = #{group_type,jdbcType=VARCHAR}
    inner join role_permission rp on rp.role_id = r.role_id
    inner join permission p on p.permission_id = rp.permission_id and p.group_type = #{group_type,jdbcType=VARCHAR}
    where
    ur.user_id = #{user_id,jdbcType=VARCHAR}
  </select>
  
  <select id="getUserRole" resultType="java.util.Map">
		SELECT
			r.*,
			IF (ur.user_id IS NULL, 0, 1) checked
		FROM
			role r
		LEFT JOIN user_role ur ON r.role_id = ur.role_id AND ur.user_id = #{user_id,jdbcType=INTEGER}
		WHERE
			group_type = #{type,jdbcType=VARCHAR};
  </select>
  
  <select id="selectByIds" parameterType="java.util.List" resultType="java.lang.Integer">
    select
    rp.permission_id
    from role r
    inner join role_permission rp on rp.role_id = r.role_id
    where
    r.role_id in
    <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
      #{id,jdbcType=INTEGER}
    </foreach>
  </select>
  
  <select id="getApiRoleIds" parameterType="java.util.Map" resultType="java.lang.Integer">
    select
    r.role_id
    from user_session us
    inner join user u on u.user_id = us.user_id
    inner join user_role ur on ur.user_id = u.user_id
    inner join role r on r.role_id = ur.role_id
    where us.access_token = #{token,jdbcType=VARCHAR}
    and r.group_type = #{group_type,jdbcType=VARCHAR}
    and u.status = 'OK'
  </select>
  
  <select id="getAllRole" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    *
    from role
    where group_type = #{group_type,jdbcType=VARCHAR}
  </select>
  
  <select id="getRolePermission" parameterType="com.ibenben.domain.Role" resultType="java.lang.String">
    select
    p.permission_url
    from permission p
    inner join role_permission rp on p.permission_id = rp.permission_id
    where
    rp.role_id = #{roleId,jdbcType=INTEGER}
  </select>
  
  <select id="getRoleIdByUser" parameterType="java.lang.Integer" resultType="java.lang.String">
  	select
  		r.role_id
  	from role r
  	inner join user_role ru on r.role_id = ru.role_id 
  	where ru.user_id =  #{userId,jdbcType=INTEGER}
  </select>
  
  <select id="getRoleIdsByUser" parameterType="com.ibenben.domain.User" resultType="java.lang.Integer">
    select
    r.role_id
    from role r
    inner join user_role ur on ur.role_id = r.role_id and r.group_type = #{groupType,jdbcType=VARCHAR}
    where ur.user_id = #{userId,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ibenben.domain.Role">
    insert into role (role_id, role_name, role_code, 
      group_type)
    values (#{roleId,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleCode,jdbcType=VARCHAR}, 
      #{groupType,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ibenben.domain.Role">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        role_id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="roleCode != null">
        role_code,
      </if>
      <if test="groupType != null">
        group_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleCode != null">
        #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="groupType != null">
        #{groupType,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ibenben.domain.Role">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleCode != null">
        role_code = #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="groupType != null">
        group_type = #{groupType,jdbcType=VARCHAR},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ibenben.domain.Role">
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_code = #{roleCode,jdbcType=VARCHAR},
      group_type = #{groupType,jdbcType=VARCHAR}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
</mapper>